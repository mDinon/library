// <auto-generated />
using System;
using Microblink.Library.DAL.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Microblink.Library.DAL.Migrations
{
    [DbContext(typeof(LibraryContext))]
    [Migration("20220801192153_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("dbo")
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microblink.Library.Model.Entities.Book", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"), 1L, 1);

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("0");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("TotalCopies")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Books", "dbo");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Author = "J. K. Rowling",
                            DateCreated = new DateTime(2022, 8, 1, 21, 21, 53, 439, DateTimeKind.Local).AddTicks(4316),
                            IsDeleted = false,
                            Title = "Harry Potter and the Philosopher's Stone",
                            TotalCopies = 10
                        },
                        new
                        {
                            Id = 2,
                            Author = "Frank Herbert",
                            DateCreated = new DateTime(2022, 8, 1, 21, 21, 53, 439, DateTimeKind.Local).AddTicks(4325),
                            IsDeleted = false,
                            Title = "Dune",
                            TotalCopies = 3
                        },
                        new
                        {
                            Id = 3,
                            Author = "J. R. R. Tolkien",
                            DateCreated = new DateTime(2022, 8, 1, 21, 21, 53, 439, DateTimeKind.Local).AddTicks(4327),
                            IsDeleted = false,
                            Title = "The Lord of the Rings",
                            TotalCopies = 13
                        });
                });

            modelBuilder.Entity("Microblink.Library.Model.Entities.ContactType", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"), 1L, 1);

                    b.Property<DateTime?>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("0");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ContactTypes", "dbo");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTime(2022, 8, 1, 21, 21, 53, 439, DateTimeKind.Local).AddTicks(2217),
                            IsDeleted = false,
                            Name = "Email"
                        },
                        new
                        {
                            Id = 2,
                            DateCreated = new DateTime(2022, 8, 1, 21, 21, 53, 439, DateTimeKind.Local).AddTicks(2244),
                            IsDeleted = false,
                            Name = "Mobile"
                        },
                        new
                        {
                            Id = 3,
                            DateCreated = new DateTime(2022, 8, 1, 21, 21, 53, 439, DateTimeKind.Local).AddTicks(2246),
                            IsDeleted = false,
                            Name = "Telephone"
                        });
                });

            modelBuilder.Entity("Microblink.Library.Model.Entities.Reservation", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"), 1L, 1);

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("0");

                    b.Property<bool>("IsReservationActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ReservationDateEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ReservationDateStart")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ReservationDueDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("UserId");

                    b.ToTable("Reservations", "dbo");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BookId = 2,
                            DateCreated = new DateTime(2022, 8, 1, 21, 21, 53, 439, DateTimeKind.Local).AddTicks(4977),
                            IsDeleted = false,
                            IsReservationActive = true,
                            ReservationDateStart = new DateTime(2022, 8, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            ReservationDueDate = new DateTime(2022, 8, 11, 0, 0, 0, 0, DateTimeKind.Local),
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            BookId = 3,
                            DateCreated = new DateTime(2022, 8, 1, 21, 21, 53, 439, DateTimeKind.Local).AddTicks(4989),
                            IsDeleted = false,
                            IsReservationActive = false,
                            ReservationDateEnd = new DateTime(2022, 7, 22, 0, 0, 0, 0, DateTimeKind.Local),
                            ReservationDateStart = new DateTime(2022, 7, 17, 0, 0, 0, 0, DateTimeKind.Local),
                            ReservationDueDate = new DateTime(2022, 7, 27, 0, 0, 0, 0, DateTimeKind.Local),
                            UserId = 1
                        },
                        new
                        {
                            Id = 3,
                            BookId = 1,
                            DateCreated = new DateTime(2022, 8, 1, 21, 21, 53, 439, DateTimeKind.Local).AddTicks(4995),
                            IsDeleted = false,
                            IsReservationActive = true,
                            ReservationDateStart = new DateTime(2022, 7, 17, 0, 0, 0, 0, DateTimeKind.Local),
                            ReservationDueDate = new DateTime(2022, 7, 27, 0, 0, 0, 0, DateTimeKind.Local),
                            UserId = 1
                        });
                });

            modelBuilder.Entity("Microblink.Library.Model.Entities.User", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"), 1L, 1);

                    b.Property<DateTime?>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("Date");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("0");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Users", "dbo");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTime(2022, 8, 1, 21, 21, 53, 439, DateTimeKind.Local).AddTicks(2952),
                            DateOfBirth = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Test",
                            IsDeleted = false,
                            LastName = "Testić"
                        });
                });

            modelBuilder.Entity("Microblink.Library.Model.Entities.UserContact", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"), 1L, 1);

                    b.Property<int>("ContactTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("0");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("ContactTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("UserContacts", "dbo");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ContactTypeId = 1,
                            DateCreated = new DateTime(2022, 8, 1, 21, 21, 53, 439, DateTimeKind.Local).AddTicks(3699),
                            IsDeleted = false,
                            UserId = 1,
                            Value = "test.test@test.test"
                        },
                        new
                        {
                            Id = 2,
                            ContactTypeId = 2,
                            DateCreated = new DateTime(2022, 8, 1, 21, 21, 53, 439, DateTimeKind.Local).AddTicks(3707),
                            IsDeleted = false,
                            UserId = 1,
                            Value = "+385987456123"
                        },
                        new
                        {
                            Id = 3,
                            ContactTypeId = 3,
                            DateCreated = new DateTime(2022, 8, 1, 21, 21, 53, 439, DateTimeKind.Local).AddTicks(3709),
                            IsDeleted = false,
                            UserId = 1,
                            Value = "011234567"
                        });
                });

            modelBuilder.Entity("Microblink.Library.Model.Entities.Reservation", b =>
                {
                    b.HasOne("Microblink.Library.Model.Entities.Book", "Book")
                        .WithMany("Reservations")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microblink.Library.Model.Entities.User", "User")
                        .WithMany("Reservations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microblink.Library.Model.Entities.UserContact", b =>
                {
                    b.HasOne("Microblink.Library.Model.Entities.ContactType", "ContactType")
                        .WithMany()
                        .HasForeignKey("ContactTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microblink.Library.Model.Entities.User", "User")
                        .WithMany("UserContacts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContactType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microblink.Library.Model.Entities.Book", b =>
                {
                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("Microblink.Library.Model.Entities.User", b =>
                {
                    b.Navigation("Reservations");

                    b.Navigation("UserContacts");
                });
#pragma warning restore 612, 618
        }
    }
}
